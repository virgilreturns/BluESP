#include "rom.h"
#include <string.h>
#include <stdio.h>

extern uint16_t address;

static const uint8_t nintendo_logo[] = {
	0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
	0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
	0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E
}; // used as a key to start the ROM


typedef struct {
    uint8_t entry_point[0x04];    // 0x0100–0x0103
    uint8_t logo[0x30];           // 0x0104–0x0133
    uint8_t title[0x10];          // 0x0134–0x0143 (includes title + CGB flag)
    uint8_t new_licensee[0x02];   // 0x0144–0x0145
    uint8_t sgb_flag;             // 0x0146
    uint8_t cartridge_type;       // 0x0147
    uint8_t rom_size;             // 0x0148
    uint8_t ram_size;             // 0x0149
    uint8_t destination_code;     // 0x014A
    uint8_t old_licensee_code;    // 0x014B
    uint8_t mask_rom_version;     // 0x014C
    uint8_t header_checksum;      // 0x014D
    uint8_t global_checksum[0x02]; // 0x014E–0x014F
} gb_header_t;

typedef struct {
    uint8_t rom_data[0x8000];
    gb_header_t* header; // set to 0x0100 on init
} rom_t;

int rom_init()  {
    rom_t myRom {
        .rom_data = memcmp();
    }

}